{"version":3,"sources":["components/App.tsx","index.tsx"],"names":["cities","WeatherIcon","_ref","type","_jsx","className","viewBox","fill","children","getIcon","toLowerCase","d","strokeWidth","strokeLinecap","RainEffect","raindrops","Array","from","length","map","_","i","id","left","Math","random","animationDuration","animationDelay","drop","style","WindSigns","_ref2","windSpeed","windDegree","windSigns","top","transform","sign","PressureIndicator","_ref4","pressure","status","getPressureStatus","_jsxs","renderMarks","marks","rotation","isMajor","push","App","weatherData","setWeatherData","useState","forecastData","setForecastData","currentCityIndex","setCurrentCityIndex","error","setError","isLoading","setIsLoading","apiKey","process","googleMapsApiKey","useEffect","async","responses","Promise","all","city","axios","get","params","q","appid","units","response","data","forecastResponse","processedForecast","processForecastData","list","rainChance","clouds","document","body","classList","toggle","_error$response","_error$response2","console","fetchWeather","loadGoogleMapsScript","script","createElement","src","defer","head","appendChild","forecastList","dailyForecasts","today","Date","nextDate","setDate","getDate","dayForecasts","filter","forecast","dt","midDayForecast","reduce","prev","curr","prevTime","getHours","currTime","abs","date","toLocaleDateString","weekday","month","day","temp","round","main","weather","icon","onClick","window","location","reload","currentWeather","isRainy","isWindy","wind","speed","_Fragment","deg","position","width","height","gradientTransform","offset","stopColor","handlePrevCity","prevIndex","name","handleNextCity","toLocaleTimeString","hour","minute","hour12","description","humidity","degrees","cx","cy","r","strokeDasharray","strokeDashoffset","x","y","value","fontSize","textAnchor","dominantBaseline","getUVIndexText","index","display","alignItems","forecasts","weatherTypes","f","temperatures","avgTemp","a","b","sunnyDays","w","includes","rainyDays","cloudyDays","summary","generateWeatherSummary","hasRain","some","hasSun","suggestions","join","generateOutfitSuggestions","ReactDOM","render","React","StrictMode","getElementById"],"mappings":"qLAIA,MAAMA,EAAS,CAAC,cAAe,WAAY,QAAS,QAAS,SAAU,UASjEC,EAA0CC,IAAe,IAAd,KAAEC,GAAMD,EAsCvD,OACEE,cAAA,OAAKC,UAAU,eAAeC,QAAQ,YAAYC,KAAK,eAAcC,SAtCvDC,MACd,OAAQN,EAAKO,eACX,IAAK,QACL,IAAK,YACH,OACEN,cAAA,QAAMO,EAAE,mkBAEZ,IAAK,SACL,IAAK,aACL,IAAK,mBACL,IAAK,gBACL,IAAK,kBACH,OACEP,cAAA,QAAMO,EAAE,iKAEZ,IAAK,OACL,IAAK,aACL,IAAK,gBACL,IAAK,aACH,OACEP,cAAA,QAAMO,EAAE,kPAEZ,IAAK,eACH,OACEP,cAAA,QAAMO,EAAE,kGAEZ,IAAK,OACH,OACEP,cAAA,QAAMO,EAAE,8HAA8HC,YAAY,IAAIC,cAAc,UAExK,QACE,OACET,cAAA,QAAMO,EAAE,8GAEd,EAKGF,IACG,EAIJK,EAAuBA,KAC3B,MAAMC,EAAYC,MAAMC,KAAK,CAAEC,OAAQ,MAAOC,KAAI,CAACC,EAAGC,KAAC,CACrDC,GAAID,EACJE,KAAyB,IAAhBC,KAAKC,SAAR,IACNC,kBAAsC,GAAhBF,KAAKC,SAAiB,GAAzB,IACnBE,eAAmC,EAAhBH,KAAKC,SAAR,QAGlB,OACErB,cAAA,OAAKC,UAAU,iBAAgBG,SAC5BO,EAAUI,KAAIS,GACbxB,cAAA,OAEEC,UAAU,YACVwB,MAAO,CACLN,KAAMK,EAAKL,KACXG,kBAAmBE,EAAKF,kBACxBC,eAAgBC,EAAKD,iBALlBC,EAAKN,OASV,EAIJQ,EAAiEC,IAAgC,IAA/B,UAAEC,EAAS,WAAEC,GAAYF,EAC/F,MAAMG,EAAYlB,MAAMC,KAAK,CAAEC,OAAQ,KAAMC,KAAI,CAACC,EAAGC,KAAC,CACpDC,GAAID,EACJc,IAAwB,IAAhBX,KAAKC,SAAR,IACLC,kBAAsC,EAAhBF,KAAKC,SAAe,EAAvB,IACnBE,eAAmC,EAAhBH,KAAKC,SAAR,IAChBW,UAAW,UAAUH,YAGvB,OACE7B,cAAA,OAAKC,UAAU,aAAYG,SACxB0B,EAAUf,KAAIkB,GACbjC,cAAA,OAEEC,UAAU,YACVwB,MAAO,CACLM,IAAKE,EAAKF,IACVT,kBAAmBW,EAAKX,kBACxBC,eAAgBU,EAAKV,eACrBS,UAAWC,EAAKD,YANbC,EAAKf,OAUV,EAqEJgB,EAAoDC,IAAmB,IAAlB,SAAEC,GAAUD,EACrE,MAMME,EANqBD,IACrBA,EAAW,KAAa,OACxBA,EAAW,KAAa,MACrB,SAGME,CAAkBF,GAmBjC,OACEpC,cAAA,OAAKC,UAAU,qBAAoBG,SACjCmC,eAAA,OAAKtC,UAAW,4BAA4BoC,IAASjC,SAAA,CACnDJ,cAAA,OAAKC,UAAU,iBAAgBG,SAnBjBoC,MAClB,MAAMC,EAAQ,GACd,IAAK,IAAIxB,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,MAAMyB,EAAe,GAAJzB,EACX0B,EAAU1B,EAAI,IAAM,EAC1BwB,EAAMG,KACJ5C,cAAA,OAEEC,UAAW,kBAAiB0C,EAAU,QAAU,IAChDlB,MAAO,CAAEO,UAAW,UAAUU,UAFzBzB,GAKX,CACA,OAAOwB,CAAK,EAMyBD,KACjCxC,cAAA,OAAKC,UAAW,mBAChBD,cAAA,QAAMC,UAAU,sBAAqBG,SAAC,SACtCJ,cAAA,QAAMC,UAAU,wBAAuBG,SAAC,WACxCJ,cAAA,QAAMC,UAAU,qBAAoBG,SAAC,YAEnC,EAuZKyC,MAnZOA,KACpB,MAAOC,EAAaC,GAAkBC,mBAAgB,KAC/CC,EAAcC,GAAmBF,mBAAyB,KAC1DG,EAAkBC,GAAuBJ,mBAAS,IAClDK,EAAOC,GAAYN,mBAAwB,OAC3CO,EAAWC,GAAgBR,oBAAS,GAErCS,EAASC,6CACTC,EAAmBD,6CAEzBE,qBAAU,KACaC,WACnB,IACEL,GAAa,GACbF,EAAS,MAST,MAAMQ,QAAkBC,QAAQC,IAC9BpE,EAAOmB,KAAIkD,GACTC,IAAMC,IAAI,kDAAmD,CAC3DC,OAAQ,CACNC,EAAGJ,EACHK,MAAOb,EACPc,MAAO,iBAKfxB,EAAee,EAAU/C,KAAIyD,GAAYA,EAASC,QAGlD,MAAMC,QAAyBR,IAAMC,IAAI,mDAAoD,CAC3FC,OAAQ,CACNC,EAAGzE,EAAOuD,GACVmB,MAAOb,EACPc,MAAO,cAKLI,EAAoBC,EAAoBF,EAAiBD,KAAKI,MAIpE,GAHA3B,EAAgByB,GAGZb,EAAUhD,OAAS,EAAG,CACxB,MAAMgE,EAAahB,EAAUX,GAAkBsB,KAAKM,OAAOf,IAC3DgB,SAASC,KAAKC,UAAUC,OAAO,cAAeL,GAAc,GAC9D,CACF,CAAE,MAAOzB,GAAa,IAAD+B,EAAAC,EACnBC,QAAQjC,MAAM,kCAAmCA,GAClB,OAAb,QAAd+B,EAAA/B,EAAMmB,gBAAQ,IAAAY,OAAA,EAAdA,EAAgB/C,QAClBiB,EAAS,2DAC2B,OAAb,QAAd+B,EAAAhC,EAAMmB,gBAAQ,IAAAa,OAAA,EAAdA,EAAgBhD,QACzBiB,EAAS,qCAETA,EAAS,uDAEb,CAAC,QACCE,GAAa,EACf,GAGF+B,EAAc,GACb,CAAC9B,EAAQN,IAEZS,qBAAU,KAUJD,GARyB6B,MAC3B,MAAMC,EAAST,SAASU,cAAc,UACtCD,EAAOE,IAAM,+CAA+ChC,IAC5D8B,EAAO5B,OAAQ,EACf4B,EAAOG,OAAQ,EACfZ,SAASa,KAAKC,YAAYL,EAAO,EAIjCD,EACF,GACC,CAAC7B,IAEJ,MAAMiB,EAAuBmB,IAC3B,MAAMC,EAAiC,GACjCC,EAAQ,IAAIC,KAGlB,IAAK,IAAIjF,EAAI,EAAGA,GAAK,EAAGA,IAAK,CAC3B,MAAMkF,EAAW,IAAID,KAAKD,GAC1BE,EAASC,QAAQH,EAAMI,UAAYpF,GACnC,MAAMqF,EAAeP,EAAaQ,QAAOC,GAClB,IAAIN,KAAmB,IAAdM,EAASC,IACnBJ,YAAcF,EAASE,YAG7C,GAAIC,EAAaxF,OAAS,EAAG,CAE3B,MAAM4F,EAAiBJ,EAAaK,QAAO,CAACC,EAAMC,KAChD,MAAMC,EAAW,IAAIZ,KAAe,IAAVU,EAAKH,IAAWM,WACpCC,EAAW,IAAId,KAAe,IAAVW,EAAKJ,IAAWM,WAC1C,OAAO3F,KAAK6F,IAAIH,EAAW,IAAM1F,KAAK6F,IAAID,EAAW,IAAMJ,EAAOC,CAAI,IAGxEb,EAAepD,KAAK,CAClBsE,KAAMf,EAASgB,mBAAmB,QAAS,CAAEC,QAAS,QAASC,MAAO,QAASC,IAAK,YACpFC,KAAMnG,KAAKoG,MAAMd,EAAee,KAAKF,MACrCG,QAAShB,EAAegB,QAAQ,GAAGD,KACnCE,KAAMjB,EAAegB,QAAQ,GAAGC,MAEpC,CACF,CAEA,OAAO3B,CAAc,EAuGvB,GAAI3C,EACF,OACErD,cAAA,OAAKC,UAAU,oCAAmCG,SAChDmC,eAAA,OAAKtC,UAAU,gBAAeG,SAAA,CAC5BJ,cAAA,OAAKE,QAAQ,YAAYC,KAAK,eAAeF,UAAU,aAAYG,SACjEJ,cAAA,QAAMO,EAAE,uGAEVP,cAAA,KAAAI,SAAIiD,IACJrD,cAAA,UAAQ4H,QAASA,IAAMC,OAAOC,SAASC,SAAU9H,UAAU,eAAcG,SAAC,mBAQlF,GAAImD,EACF,OACEvD,cAAA,OAAKC,UAAU,sCAAqCG,SAClDmC,eAAA,OAAKtC,UAAU,kBAAiBG,SAAA,CAC9BJ,cAAA,OAAKC,UAAU,oBACfD,cAAA,KAAAI,SAAG,iCAMX,IAAK0C,EAAYhC,OACf,OAAO,KAGT,MAAMkH,EAAiBlF,EAAYK,GAC7B8E,EAAUD,EAAejD,OAAOf,KAAO,GACvCkE,EAAUF,EAAeG,KAAKC,MAAQ,EAE5C,OACE7F,eAAA8F,WAAA,CAAAjI,SAAA,CACG6H,GAAWjI,cAACU,EAAU,IACtBwH,GAAWlI,cAAC0B,EAAS,CAACE,UAAWoG,EAAeG,KAAKC,MAAOvG,WAAYmG,EAAeG,KAAKG,MAC7F/F,eAAA,OAAKtC,UAAU,eAAcG,SAAA,CAC3BJ,cAAA,OAAKC,UAAU,0BACfD,cAAA,OAAKC,UAAU,0BACfD,cAAA,OAAKC,UAAU,6BAEjBsC,eAAA,OAAKtC,UAAU,oBAAmBG,SAAA,CAChCJ,cAAA,OAAKyB,MAAO,CAAE8G,SAAU,WAAYC,MAAO,EAAGC,OAAQ,GAAIrI,SACxDJ,cAAA,QAAAI,SACEmC,eAAA,kBAAgBrB,GAAG,cAAcwH,kBAAkB,aAAYtI,SAAA,CAC7DJ,cAAA,QAAM2I,OAAO,KAAKC,UAAU,YAC5B5I,cAAA,QAAM2I,OAAO,MAAMC,UAAU,YAC7B5I,cAAA,QAAM2I,OAAO,MAAMC,UAAU,YAC7B5I,cAAA,QAAM2I,OAAO,MAAMC,UAAU,YAC7B5I,cAAA,QAAM2I,OAAO,OAAOC,UAAU,mBAKpCrG,eAAA,OAAKtC,UAAU,kBAAiBG,SAAA,CAC9BmC,eAAA,OAAKtC,UAAU,eAAcG,SAAA,CAC3BmC,eAAA,OAAKtC,UAAU,WAAUG,SAAA,CACvBJ,cAAA,OAAKC,UAAU,gBAAgBC,QAAQ,YAAYC,KAAK,eAAcC,SACpEJ,cAAA,QAAMO,EAAE,iKAEVgC,eAAA,OAAKtC,UAAU,kBAAiBG,SAAA,CAC9BJ,cAAA,UAAQC,UAAU,YAAY2H,QApKrBiB,KACrBzF,GAAqB0F,GAA6B,IAAdA,EAAkBlJ,EAAOkB,OAAS,EAAIgI,EAAY,GAAG,EAmKtB,aAAW,gBAAe1I,SAC/EJ,cAAA,OAAKE,QAAQ,YAAWE,SACtBJ,cAAA,QAAMO,EAAE,sDAGZP,cAAA,QAAMC,UAAU,YAAWG,SAAE4H,EAAee,OAC5C/I,cAAA,UAAQC,UAAU,YAAY2H,QAtKrBoB,KACrB5F,GAAqB0F,GAAeA,IAAclJ,EAAOkB,OAAS,EAAI,EAAIgI,EAAY,GAAG,EAqKtB,aAAW,YAAW1I,SAC3EJ,cAAA,OAAKE,QAAQ,YAAWE,SACtBJ,cAAA,QAAMO,EAAE,yDAIdP,cAAA,QAAMC,UAAU,eAAcG,UAvK5B,IAAI8F,MACL+C,mBAAmB,QAAS,CACrCC,KAAM,UACNC,OAAQ,UACRC,QAAQ,SAsKF7G,eAAA,OAAKtC,UAAU,sBAAqBG,SAAA,CACjCgB,KAAKoG,MAAMQ,EAAeP,KAAKF,MAAM,UAExCvH,cAAA,OAAKC,UAAU,sBAAqBG,SACjC4H,EAAeN,QAAQ,GAAG2B,cAE7B9G,eAAA,OAAKtC,UAAU,gBAAeG,SAAA,CAC5BmC,eAAA,QAAAnC,SAAA,CAAO4H,EAAeP,KAAKrF,SAAS,SACpCG,eAAA,QAAAnC,SAAA,CAAO4H,EAAeP,KAAK6B,SAAS,OACpC/G,eAAA,QAAAnC,SAAA,CAAO4H,EAAeG,KAAKC,MAAM,gBAIrC7F,eAAA,OAAKtC,UAAU,aAAYG,SAAA,CACzBmC,eAAA,OAAKtC,UAAU,YAAWG,SAAA,CACxBJ,cAAA,MAAAI,SAAI,SACJmC,eAAA,OAAKtC,UAAU,UAASG,SAAA,CACtBJ,cAAA,OACEC,UAAU,gBACVwB,MAAO,CAAEO,UAAW,2BArLVuH,EAqLqDvB,EAAeG,KAAKG,IApL1F,UAAUiB,YAsLLhH,eAAA,OAAKtC,UAAU,iBAAgBG,SAAA,CAC7BJ,cAAA,QAAMC,UAAU,kBAAiBG,SAAC,MAClCJ,cAAA,QAAMC,UAAU,kBAAiBG,SAAC,MAClCJ,cAAA,QAAMC,UAAU,kBAAiBG,SAAC,MAClCJ,cAAA,QAAMC,UAAU,kBAAiBG,SAAC,YAGtCmC,eAAA,OAAKtC,UAAU,aAAYG,SAAA,CAAE4H,EAAeG,KAAKC,MAAM,aAGzD7F,eAAA,OAAKtC,UAAU,YAAWG,SAAA,CACxBJ,cAAA,MAAAI,SAAI,gBACJmC,eAAA,OAAKtC,UAAU,QAAQC,QAAQ,cAAaE,SAAA,CAC1CJ,cAAA,UAAQC,UAAU,eAAeuJ,GAAG,KAAKC,GAAG,KAAKC,EAAE,OACnD1J,cAAA,UACEC,UAAU,iBACVuJ,GAAG,KACHC,GAAG,KACHC,EAAE,KACFC,gBAAgB,UAChBC,iBAAkB,SAAW,EAAK5B,EAAejD,OAAOf,IAAM,OAEhEzB,eAAA,QAAMtC,UAAU,aAAa4J,EAAE,KAAKC,EAAE,KAAI1J,SAAA,CACvC4H,EAAejD,OAAOf,IAAI,aAKjCzB,eAAA,OAAKtC,UAAU,YAAWG,SAAA,CACxBJ,cAAA,MAAAI,SAAI,aACJJ,cAACkC,EAAiB,CAACE,SAAU4F,EAAeP,KAAKrF,WACjDG,eAAA,OAAKtC,UAAU,aAAYG,SAAA,CAAE4H,EAAeP,KAAKrF,SAAS,YAG5DG,eAAA,OAAKtC,UAAU,YAAWG,SAAA,CACxBJ,cAAA,MAAAI,SAAI,aACJmC,eAAA,OAAKtC,UAAW,mBAvNH8J,EAuNqC,EAtNxDA,GAAS,EAAU,MACnBA,GAAS,EAAU,WACnBA,GAAS,EAAU,OACnBA,GAAS,GAAW,YACjB,WAkN2D7J,QAAQ,cAAaE,SAAA,CAC3EJ,cAAA,UAAQC,UAAU,eAAeuJ,GAAG,KAAKC,GAAG,KAAKC,EAAE,OACnD1J,cAAA,UACEC,UAAU,iBACVuJ,GAAG,KACHC,GAAG,KACHC,EAAE,KACFC,gBAAgB,UAChBC,iBAAkB,WAEpB5J,cAAA,QAAMC,UAAU,aAAa4J,EAAE,KAAKC,EAAE,KAAKE,SAAS,KAAKC,WAAW,SAASC,iBAAiB,SAAQ9J,SAzN5F2J,IAClBA,GAAS,EAAU,MACnBA,GAAS,EAAU,WACnBA,GAAS,EAAU,OACnBA,GAAS,GAAW,YACjB,UAqNQI,CAAe,iBAO1B5H,eAAA,OAAKtC,UAAU,iBAAgBG,SAAA,CAC7BJ,cAAA,MAAAI,SAAI,mBACH6C,EAAalC,KAAI,CAACuG,EAAK8C,IACtB7H,eAAA,OAAiBtC,UAAU,eAAcG,SAAA,CACvCmC,eAAA,OAAKd,MAAO,CAAE4I,QAAS,OAAQC,WAAY,UAAWlK,SAAA,CACpDJ,cAAA,OAAKC,UAAU,wBAAuBG,SACpCJ,cAACH,EAAW,CAACE,KAAMuH,EAAII,YAEzBnF,eAAA,OAAAnC,SAAA,CACEJ,cAAA,OAAKC,UAAU,gBAAeG,SAAEkH,EAAIJ,OACpC3E,eAAA,OAAKtC,UAAU,gBAAeG,SAAA,CAAEkH,EAAIC,KAAK,iBAG7CvH,cAAA,OAAKC,UAAU,mBAAkBG,SAAEkH,EAAII,YAV/B0C,KAaZ7H,eAAA,OAAKtC,UAAU,eAAcG,SAAA,CAC3BJ,cAAA,MAAAI,SAAI,wBACJJ,cAAA,KAAAI,SA3OsBmK,KAC9B,MAAMC,EAAeD,EAAUxJ,KAAI0J,GAAKA,EAAE/C,QAAQpH,gBAC5CoK,EAAeH,EAAUxJ,KAAI0J,GAAKA,EAAElD,OACpCoD,EAAUvJ,KAAKoG,MAAMkD,EAAa/D,QAAO,CAACiE,EAAGC,IAAMD,EAAIC,GAAG,GAAKH,EAAa5J,QAE5EgK,EAAYN,EAAajE,QAAOwE,GAAKA,EAAEC,SAAS,WAAUlK,OAC1DmK,EAAYT,EAAajE,QAAOwE,GAAKA,EAAEC,SAAS,UAASlK,OACzDoK,EAAaV,EAAajE,QAAOwE,GAAKA,EAAEC,SAAS,WAAUlK,OAEjE,IAAIqK,EAAU,GAYd,OATEA,EADEL,GAAa,EACL,8FAAoFA,+CAAuDH,SAC5IM,GAAa,EACZ,gDAAiCA,sFAA8FN,SAChIO,GAAc,EACb,+DAAgDA,oEAA6EP,SAE7H,wIAA8HA,SAGnIQ,CAAO,EAsNFC,CAAuBnI,QAE7BV,eAAA,OAAKtC,UAAU,qBAAoBG,SAAA,CACjCJ,cAAA,MAAAI,SAAI,uBACJJ,cAAA,KAAAI,SAvNyBmK,KACjC,MAAMG,EAAeH,EAAUxJ,KAAI0J,GAAKA,EAAElD,OACpCoD,EAAUvJ,KAAKoG,MAAMkD,EAAa/D,QAAO,CAACiE,EAAGC,IAAMD,EAAIC,GAAG,GAAKH,EAAa5J,QAC5E0J,EAAeD,EAAUxJ,KAAI0J,GAAKA,EAAE/C,QAAQpH,gBAE5C+K,EAAUb,EAAac,MAAKP,GAAKA,EAAEC,SAAS,UAC5CO,EAASf,EAAac,MAAKP,GAAKA,EAAEC,SAAS,WAC3CQ,EAAwB,GA6B9B,OA1BIb,EAAU,GACZa,EAAY5I,KAAK,qEACR+H,EAAU,GACnBa,EAAY5I,KAAK,4DACR+H,EAAU,GACnBa,EAAY5I,KAAK,+DACR+H,EAAU,GACnBa,EAAY5I,KAAK,2DAEjB4I,EAAY5I,KAAK,sDAIfyI,GACFG,EAAY5I,KAAK,4CAEf2I,GACFC,EAAY5I,KAAK,4DAEf+H,EAAU,IAAMY,GAClBC,EAAY5I,KAAK,gDAEf+H,EAAU,IACZa,EAAY5I,KAAK,yDAGZ4I,EAAYC,KAAK,WAAM,EAmLlBC,CAA0BzI,iBA/Pf8G,MAJCR,CAuQrB,EChmBPoC,IAASC,OACP5L,cAAC6L,IAAMC,WAAU,CAAA1L,SACfJ,cAAC6C,EAAG,MAENmC,SAAS+G,eAAe,Q","file":"static/js/main.9cd482ad.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport axios from 'axios';\nimport '../App.css';\n\nconst cities = ['Los Angeles', 'New York', 'Miami', 'Paris', 'London', 'Madrid'];\n\ninterface ForecastData {\n  date: string;\n  temp: number;\n  weather: string;\n  icon: string;\n}\n\nconst WeatherIcon: React.FC<{ type: string }> = ({ type }) => {\n  const getIcon = () => {\n    switch (type.toLowerCase()) {\n      case 'clear':\n      case 'clear sky':\n        return (\n          <path d=\"M12 3a1 1 0 0 1 1 1v2a1 1 0 1 1-2 0V4a1 1 0 0 1 1-1zm0 14a1 1 0 0 1 1 1v2a1 1 0 1 1-2 0v-2a1 1 0 0 1 1-1zm9-7a1 1 0 1 1 0 2h-2a1 1 0 1 1 0-2h2zM5 12a1 1 0 0 1-1 1H2a1 1 0 1 1 0-2h2a1 1 0 0 1 1 1zm.64-6.36a1 1 0 0 1 1.42 0l1.42 1.42a1 1 0 0 1-1.42 1.42L5.64 7.06a1 1 0 0 1 0-1.42zm12.72 12.72a1 1 0 0 1 0 1.42l-1.42 1.42a1 1 0 1 1-1.42-1.42l1.42-1.42a1 1 0 0 1 1.42 0zm0-12.72a1 1 0 0 1 0 1.42l-1.42 1.42a1 1 0 1 1-1.42-1.42l1.42-1.42a1 1 0 0 1 1.42 0zM7.06 18.36a1 1 0 0 1 0-1.42l1.42-1.42a1 1 0 1 1 1.42 1.42l-1.42 1.42a1 1 0 0 1-1.42 0zM12 6a6 6 0 1 0 0 12 6 6 0 0 0 0-12z\" />\n        );\n      case 'clouds':\n      case 'few clouds':\n      case 'scattered clouds':\n      case 'broken clouds':\n      case 'overcast clouds':\n        return (\n          <path d=\"M19 18H6a4 4 0 0 1-.38-7.98 6 6 0 1 1 11.32-3.02A4 4 0 1 1 19 18zM12 4a4 4 0 0 0-3.87 3.02A2 2 0 0 0 6 9a2 2 0 0 0 0 4h13a2 2 0 1 0-.15-3.99A4 4 0 0 0 12 4z\" />\n        );\n      case 'rain':\n      case 'light rain':\n      case 'moderate rain':\n      case 'heavy rain':\n        return (\n          <path d=\"M19 18H6a4 4 0 0 1-.38-7.98 6 6 0 1 1 11.32-3.02A4 4 0 1 1 19 18zM8 20a1 1 0 1 1-2 0c0-1.5 1-3 2-3s2 1.5 2 3a1 1 0 1 1-2 0zm5 0a1 1 0 1 1-2 0c0-1.5 1-3 2-3s2 1.5 2 3a1 1 0 1 1-2 0zm5 0a1 1 0 1 1-2 0c0-1.5 1-3 2-3s2 1.5 2 3a1 1 0 1 1-2 0z\" />\n        );\n      case 'thunderstorm':\n        return (\n          <path d=\"M19 18H6a4 4 0 0 1-.38-7.98 6 6 0 1 1 11.32-3.02A4 4 0 1 1 19 18zm-9 0l2-4h-3l1-3-2 4h3l-1 3z\" />\n        );\n      case 'snow':\n        return (\n          <path d=\"M19 18H6a4 4 0 0 1-.38-7.98 6 6 0 1 1 11.32-3.02A4 4 0 1 1 19 18zM8 20h.01M12 20h.01M16 20h.01M8 16h.01M12 16h.01M16 16h.01\" strokeWidth=\"2\" strokeLinecap=\"round\" />\n        );\n      default:\n        return (\n          <path d=\"M12 3a1 1 0 0 1 1 1v2a1 1 0 1 1-2 0V4a1 1 0 0 1 1-1zm0 14a1 1 0 0 1 1 1v2a1 1 0 1 1-2 0v-2a1 1 0 0 1 1-1z\" />\n        );\n    }\n  };\n\n  return (\n    <svg className=\"weather-icon\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n      {getIcon()}\n    </svg>\n  );\n};\n\nconst RainEffect: React.FC = () => {\n  const raindrops = Array.from({ length: 100 }).map((_, i) => ({\n    id: i,\n    left: `${Math.random() * 100}%`,\n    animationDuration: `${Math.random() * 0.5 + 0.7}s`,\n    animationDelay: `${Math.random() * 2}s`\n  }));\n\n  return (\n    <div className=\"rain-container\">\n      {raindrops.map(drop => (\n        <div\n          key={drop.id}\n          className=\"rain-drop\"\n          style={{\n            left: drop.left,\n            animationDuration: drop.animationDuration,\n            animationDelay: drop.animationDelay\n          }}\n        />\n      ))}\n    </div>\n  );\n};\n\nconst WindSigns: React.FC<{ windSpeed: number; windDegree: number }> = ({ windSpeed, windDegree }) => {\n  const windSigns = Array.from({ length: 20 }).map((_, i) => ({\n    id: i,\n    top: `${Math.random() * 100}%`,\n    animationDuration: `${Math.random() * 2 + 3}s`,\n    animationDelay: `${Math.random() * 2}s`,\n    transform: `rotate(${windDegree}deg)`\n  }));\n\n  return (\n    <div className=\"wind-signs\">\n      {windSigns.map(sign => (\n        <div\n          key={sign.id}\n          className=\"wind-sign\"\n          style={{\n            top: sign.top,\n            animationDuration: sign.animationDuration,\n            animationDelay: sign.animationDelay,\n            transform: sign.transform\n          }}\n        />\n      ))}\n    </div>\n  );\n};\n\ninterface MapProps {\n  city: string;\n  apiKey: string;\n}\n\nconst Map: React.FC<MapProps> = ({ city, apiKey }) => {\n  const mapRef = useRef<HTMLDivElement>(null);\n  const [mapLoaded, setMapLoaded] = useState(false);\n\n  useEffect(() => {\n    const loadMap = async () => {\n      try {\n        // Get city coordinates\n        const geocodeResponse = await axios.get(\n          `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(\n            city\n          )}&key=${apiKey}`\n        );\n\n        if (geocodeResponse.data.results.length > 0) {\n          const { lat, lng } = geocodeResponse.data.results[0].geometry.location;\n          \n          // Load Google Maps\n          const google = (window as any).google;\n          const map = new google.maps.Map(mapRef.current, {\n            center: { lat, lng },\n            zoom: 12,\n            styles: [\n              {\n                featureType: 'water',\n                elementType: 'geometry',\n                stylers: [{ color: '#b0ddf7' }]\n              },\n              {\n                featureType: 'landscape',\n                elementType: 'geometry',\n                stylers: [{ color: '#f5f5f5' }]\n              }\n            ],\n            disableDefaultUI: true,\n            zoomControl: true\n          });\n\n          // Add marker\n          new google.maps.Marker({\n            position: { lat, lng },\n            map,\n            title: city\n          });\n\n          setMapLoaded(true);\n        }\n      } catch (error) {\n        console.error('Error loading map:', error);\n      }\n    };\n\n    if (!mapLoaded) {\n      loadMap();\n    }\n  }, [city, apiKey, mapLoaded]);\n\n  return <div ref={mapRef} className=\"map-container\" />;\n};\n\nconst PressureIndicator: React.FC<{ pressure: number }> = ({ pressure }) => {\n  const getPressureStatus = (pressure: number) => {\n    if (pressure > 1022) return 'high';\n    if (pressure < 1009) return 'low';\n    return 'normal';\n  };\n\n  const status = getPressureStatus(pressure);\n\n  // Create tick marks for the pressure gauge\n  const renderMarks = () => {\n    const marks = [];\n    for (let i = 0; i < 24; i++) {\n      const rotation = i * 15;\n      const isMajor = i % 3 === 0;\n      marks.push(\n        <div\n          key={i}\n          className={`pressure-mark ${isMajor ? 'major' : ''}`}\n          style={{ transform: `rotate(${rotation}deg)` }}\n        />\n      );\n    }\n    return marks;\n  };\n\n  return (\n    <div className=\"pressure-indicator\">\n      <div className={`pressure-circle pressure-${status}`}>\n        <div className=\"pressure-marks\">{renderMarks()}</div>\n        <div className={`pressure-arrow`} />\n        <span className=\"pressure-label high\">High</span>\n        <span className=\"pressure-label normal\">Normal</span>\n        <span className=\"pressure-label low\">Low</span>\n      </div>\n    </div>\n  );\n};\n\nconst App: React.FC = () => {\n  const [weatherData, setWeatherData] = useState<any[]>([]);\n  const [forecastData, setForecastData] = useState<ForecastData[]>([]);\n  const [currentCityIndex, setCurrentCityIndex] = useState(0);\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const apiKey = process.env.REACT_APP_OPENWEATHER_API_KEY;\n  const googleMapsApiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\n\n  useEffect(() => {\n    const fetchWeather = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n\n        if (!apiKey) {\n          setError('OpenWeather API key is missing. Please check your environment variables.');\n          setIsLoading(false);\n          return;\n        }\n\n        // Fetch current weather\n        const responses = await Promise.all(\n          cities.map(city =>\n            axios.get('https://api.openweathermap.org/data/2.5/weather', {\n              params: {\n                q: city,\n                appid: apiKey,\n                units: 'imperial'\n              }\n            })\n          )\n        );\n        setWeatherData(responses.map(response => response.data));\n\n        // Fetch forecast for current city\n        const forecastResponse = await axios.get('https://api.openweathermap.org/data/2.5/forecast', {\n          params: {\n            q: cities[currentCityIndex],\n            appid: apiKey,\n            units: 'imperial'\n          }\n        });\n\n        // Process forecast data\n        const processedForecast = processForecastData(forecastResponse.data.list);\n        setForecastData(processedForecast);\n\n        // After setting weather data, update body class\n        if (responses.length > 0) {\n          const rainChance = responses[currentCityIndex].data.clouds.all;\n          document.body.classList.toggle('rainy-theme', rainChance >= 70);\n        }\n      } catch (error: any) {\n        console.error('Error fetching the weather data', error);\n        if (error.response?.status === 401) {\n          setError('Invalid API key. Please check your OpenWeather API key.');\n        } else if (error.response?.status === 404) {\n          setError('City not found. Please try again.');\n        } else {\n          setError('Failed to load weather data. Please try again later.');\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchWeather();\n  }, [apiKey, currentCityIndex]);\n\n  useEffect(() => {\n    // Load Google Maps API\n    const loadGoogleMapsScript = () => {\n      const script = document.createElement('script');\n      script.src = `https://maps.googleapis.com/maps/api/js?key=${googleMapsApiKey}`;\n      script.async = true;\n      script.defer = true;\n      document.head.appendChild(script);\n    };\n\n    if (googleMapsApiKey) {\n      loadGoogleMapsScript();\n    }\n  }, [googleMapsApiKey]);\n\n  const processForecastData = (forecastList: any[]): ForecastData[] => {\n    const dailyForecasts: ForecastData[] = [];\n    const today = new Date();\n    \n    // Group forecasts by day and get mid-day forecast for each day\n    for (let i = 1; i <= 7; i++) {\n      const nextDate = new Date(today);\n      nextDate.setDate(today.getDate() + i);\n      const dayForecasts = forecastList.filter(forecast => {\n        const forecastDate = new Date(forecast.dt * 1000);\n        return forecastDate.getDate() === nextDate.getDate();\n      });\n\n      if (dayForecasts.length > 0) {\n        // Get the forecast for mid-day (closest to 12:00)\n        const midDayForecast = dayForecasts.reduce((prev, curr) => {\n          const prevTime = new Date(prev.dt * 1000).getHours();\n          const currTime = new Date(curr.dt * 1000).getHours();\n          return Math.abs(prevTime - 12) < Math.abs(currTime - 12) ? prev : curr;\n        });\n\n        dailyForecasts.push({\n          date: nextDate.toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' }),\n          temp: Math.round(midDayForecast.main.temp),\n          weather: midDayForecast.weather[0].main,\n          icon: midDayForecast.weather[0].icon\n        });\n      }\n    }\n\n    return dailyForecasts;\n  };\n\n  const handlePrevCity = () => {\n    setCurrentCityIndex((prevIndex) => (prevIndex === 0 ? cities.length - 1 : prevIndex - 1));\n  };\n\n  const handleNextCity = () => {\n    setCurrentCityIndex((prevIndex) => (prevIndex === cities.length - 1 ? 0 : prevIndex + 1));\n  };\n\n  const formatTime = () => {\n    const now = new Date();\n    return now.toLocaleTimeString('en-US', { \n      hour: '2-digit', \n      minute: '2-digit',\n      hour12: true \n    });\n  };\n\n  const getWindDirection = (degrees: number) => {\n    return `rotate(${degrees}deg)`;\n  };\n\n  const getUVIndexClass = (value: number) => {\n    if (value <= 2) return 'low';\n    if (value <= 5) return 'moderate';\n    if (value <= 7) return 'high';\n    if (value <= 10) return 'very-high';\n    return 'extreme';\n  };\n\n  const getUVIndexText = (value: number) => {\n    if (value <= 2) return 'Low';\n    if (value <= 5) return 'Moderate';\n    if (value <= 7) return 'High';\n    if (value <= 10) return 'Very High';\n    return 'Extreme';\n  };\n\n  const generateWeatherSummary = (forecasts: ForecastData[]): string => {\n    const weatherTypes = forecasts.map(f => f.weather.toLowerCase());\n    const temperatures = forecasts.map(f => f.temp);\n    const avgTemp = Math.round(temperatures.reduce((a, b) => a + b, 0) / temperatures.length);\n    \n    const sunnyDays = weatherTypes.filter(w => w.includes('clear')).length;\n    const rainyDays = weatherTypes.filter(w => w.includes('rain')).length;\n    const cloudyDays = weatherTypes.filter(w => w.includes('cloud')).length;\n    \n    let summary = '';\n    \n    if (sunnyDays >= 5) {\n      summary = `Looks like we're in for a sun-tastic week! ☀️ Pack your shades and get ready for ${sunnyDays} days of vitamin D overload. Average temp: ${avgTemp}°F`;\n    } else if (rainyDays >= 4) {\n      summary = `Umbrella alert! 🌧️ We've got ${rainyDays} days of rain coming up. Perfect excuse for indoor movie marathons! Average temp: ${avgTemp}°F`;\n    } else if (cloudyDays >= 4) {\n      summary = `The clouds are having a party this week! 🌥️ ${cloudyDays} days of mood lighting courtesy of Mother Nature. Average temp: ${avgTemp}°F`;\n    } else {\n      summary = `A bit of everything this week - nature's keeping us on our toes! 🎭 Mix of sun, clouds, and maybe some rain. Average temp: ${avgTemp}°F`;\n    }\n\n    return summary;\n  };\n\n  const generateOutfitSuggestions = (forecasts: ForecastData[]): string => {\n    const temperatures = forecasts.map(f => f.temp);\n    const avgTemp = Math.round(temperatures.reduce((a, b) => a + b, 0) / temperatures.length);\n    const weatherTypes = forecasts.map(f => f.weather.toLowerCase());\n    \n    const hasRain = weatherTypes.some(w => w.includes('rain'));\n    const hasSun = weatherTypes.some(w => w.includes('clear'));\n    const suggestions: string[] = [];\n    \n    // Base layer suggestions based on temperature\n    if (avgTemp < 40) {\n      suggestions.push(\"🧥 Heavy winter coat, thermal layers, and warm sweaters\");\n    } else if (avgTemp < 55) {\n      suggestions.push(\"🧥 Light jacket or coat, layered with sweaters\");\n    } else if (avgTemp < 70) {\n      suggestions.push(\"👕 Light layers, long sleeves, and a light jacket\");\n    } else if (avgTemp < 85) {\n      suggestions.push(\"👕 T-shirts, short sleeves, and light fabrics\");\n    } else {\n      suggestions.push(\"👕 Breathable, light clothing and shorts\");\n    }\n    \n    // Additional items based on weather conditions\n    if (hasRain) {\n      suggestions.push(\"☔ Keep a raincoat or umbrella handy\");\n    }\n    if (hasSun) {\n      suggestions.push(\"🕶️ Don't forget sunglasses and sunscreen\");\n    }\n    if (avgTemp > 75 && hasSun) {\n      suggestions.push(\"🧢 A hat or cap for sun protection\");\n    }\n    if (avgTemp < 45) {\n      suggestions.push(\"🧣 Don't forget gloves, scarf, and warm hat\");\n    }\n    \n    return suggestions.join(\" • \");\n  };\n\n  if (error) {\n    return (\n      <div className=\"weather-container error-container\">\n        <div className=\"error-message\">\n          <svg viewBox=\"0 0 24 24\" fill=\"currentColor\" className=\"error-icon\">\n            <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z\"/>\n          </svg>\n          <p>{error}</p>\n          <button onClick={() => window.location.reload()} className=\"retry-button\">\n            Try Again\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"weather-container loading-container\">\n        <div className=\"loading-content\">\n          <div className=\"loading-spinner\"></div>\n          <p>Loading weather data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!weatherData.length) {\n    return null;\n  }\n\n  const currentWeather = weatherData[currentCityIndex];\n  const isRainy = currentWeather.clouds.all >= 70;\n  const isWindy = currentWeather.wind.speed > 9;\n\n  return (\n    <>\n      {isRainy && <RainEffect />}\n      {isWindy && <WindSigns windSpeed={currentWeather.wind.speed} windDegree={currentWeather.wind.deg} />}\n      <div className=\"app-cloud-bg\">\n        <div className=\"app-cloud app-cloud-1\"></div>\n        <div className=\"app-cloud app-cloud-2\"></div>\n        <div className=\"app-cloud app-cloud-3\"></div>\n      </div>\n      <div className=\"weather-container\">\n        <svg style={{ position: 'absolute', width: 0, height: 0 }}>\n          <defs>\n            <linearGradient id=\"uv-gradient\" gradientTransform=\"rotate(90)\">\n              <stop offset=\"0%\" stopColor=\"#3EA72D\" />\n              <stop offset=\"25%\" stopColor=\"#FFF300\" />\n              <stop offset=\"50%\" stopColor=\"#F18B00\" />\n              <stop offset=\"75%\" stopColor=\"#E53210\" />\n              <stop offset=\"100%\" stopColor=\"#B567A4\" />\n            </linearGradient>\n          </defs>\n        </svg>\n\n        <div className=\"weather-content\">\n          <div className=\"main-weather\">\n            <div className=\"location\">\n              <svg className=\"location-icon\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                <path d=\"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z\"/>\n              </svg>\n              <div className=\"city-navigation\">\n                <button className=\"nav-arrow\" onClick={handlePrevCity} aria-label=\"Previous city\">\n                  <svg viewBox=\"0 0 24 24\">\n                    <path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"/>\n                  </svg>\n                </button>\n                <span className=\"city-name\">{currentWeather.name}</span>\n                <button className=\"nav-arrow\" onClick={handleNextCity} aria-label=\"Next city\">\n                  <svg viewBox=\"0 0 24 24\">\n                    <path d=\"M8.59 16.59L10 18l6-6-6-6-1.41 1.41L13.17 12z\"/>\n                  </svg>\n                </button>\n              </div>\n              <span className=\"current-time\">{formatTime()}</span>\n            </div>\n\n            <div className=\"temperature-display\">\n              {Math.round(currentWeather.main.temp)}°\n            </div>\n            <div className=\"weather-description\">\n              {currentWeather.weather[0].description}\n            </div>\n            <div className=\"weather-stats\">\n              <span>{currentWeather.main.pressure}hpa</span>\n              <span>{currentWeather.main.humidity}%</span>\n              <span>{currentWeather.wind.speed}km/h</span>\n            </div>\n          </div>\n\n          <div className=\"stats-grid\">\n            <div className=\"stat-card\">\n              <h3>Wind</h3>\n              <div className=\"compass\">\n                <div \n                  className=\"compass-arrow\" \n                  style={{ transform: `translate(-50%, -100%) ${getWindDirection(currentWeather.wind.deg)}` }}\n                />\n                <div className=\"compass-labels\">\n                  <span className=\"compass-label n\">N</span>\n                  <span className=\"compass-label e\">E</span>\n                  <span className=\"compass-label s\">S</span>\n                  <span className=\"compass-label w\">W</span>\n                </div>\n              </div>\n              <div className=\"stat-value\">{currentWeather.wind.speed}km/h</div>\n            </div>\n\n            <div className=\"stat-card\">\n              <h3>Rain Chance</h3>\n              <svg className=\"gauge\" viewBox=\"0 0 120 120\">\n                <circle className=\"gauge-circle\" cx=\"60\" cy=\"60\" r=\"54\"/>\n                <circle \n                  className=\"gauge-progress\" \n                  cx=\"60\" \n                  cy=\"60\" \n                  r=\"54\" \n                  strokeDasharray=\"339.292\"\n                  strokeDashoffset={339.292 * (1 - (currentWeather.clouds.all / 100))}\n                />\n                <text className=\"gauge-text\" x=\"60\" y=\"60\">\n                  {currentWeather.clouds.all}%\n                </text>\n              </svg>\n            </div>\n\n            <div className=\"stat-card\">\n              <h3>Pressure</h3>\n              <PressureIndicator pressure={currentWeather.main.pressure} />\n              <div className=\"stat-value\">{currentWeather.main.pressure}hpa</div>\n            </div>\n\n            <div className=\"stat-card\">\n              <h3>UV Index</h3>\n              <svg className={`gauge uv-gauge ${getUVIndexClass(2)}`} viewBox=\"0 0 120 120\">\n                <circle className=\"gauge-circle\" cx=\"60\" cy=\"60\" r=\"54\"/>\n                <circle \n                  className=\"gauge-progress\" \n                  cx=\"60\" \n                  cy=\"60\" \n                  r=\"54\" \n                  strokeDasharray=\"339.292\"\n                  strokeDashoffset={339.292 * 0.8}\n                />\n                <text className=\"gauge-text\" x=\"60\" y=\"60\" fontSize=\"16\" textAnchor=\"middle\" dominantBaseline=\"middle\">\n                  {getUVIndexText(2)}\n                </text>\n              </svg>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"forecast-panel\">\n          <h3>7-Day Forecast</h3>\n          {forecastData.map((day, index) => (\n            <div key={index} className=\"forecast-day\">\n              <div style={{ display: 'flex', alignItems: 'center' }}>\n                <div className=\"forecast-icon-wrapper\">\n                  <WeatherIcon type={day.weather} />\n                </div>\n                <div>\n                  <div className=\"forecast-date\">{day.date}</div>\n                  <div className=\"forecast-temp\">{day.temp}°F</div>\n                </div>\n              </div>\n              <div className=\"forecast-weather\">{day.weather}</div>\n            </div>\n          ))}\n          <div className=\"week-summary\">\n            <h4>Summary of the Week</h4>\n            <p>{generateWeatherSummary(forecastData)}</p>\n          </div>\n          <div className=\"outfit-suggestions\">\n            <h4>Outfit Suggestions</h4>\n            <p>{generateOutfitSuggestions(forecastData)}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './App.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}